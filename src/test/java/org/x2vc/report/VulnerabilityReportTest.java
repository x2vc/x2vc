/*-
 * #%L
 * x2vc - XSLT XSS Vulnerability Checker
 * %%
 * Copyright (C) 2023 x2vc authors and contributors
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */
package org.x2vc.report;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertSame;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.when;
import static org.x2vc.CustomAssertions.assertXMLEquals;

import java.io.StringReader;
import java.io.StringWriter;
import java.net.URI;
import java.time.LocalDateTime;
import java.util.List;

import javax.xml.bind.JAXBContext;
import javax.xml.bind.JAXBException;
import javax.xml.bind.Marshaller;
import javax.xml.bind.Unmarshaller;

import org.apache.logging.log4j.Level;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.x2vc.stylesheet.coverage.CoverageStatistics;
import org.x2vc.stylesheet.coverage.CoverageStatus;
import org.x2vc.stylesheet.coverage.LineCoverage;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;

import nl.jqno.equalsverifier.EqualsVerifier;

@ExtendWith(MockitoExtension.class)
class VulnerabilityReportTest {

	private URI stylesheetURI;

	/**
	 * @throws java.lang.Exception
	 */
	@BeforeEach
	void setUp() throws Exception {
		this.stylesheetURI = URI.create("file:///foo/bar/foobar.xslt");
	}

	/**
	 * Test method for {@link org.x2vc.report.VulnerabilityReport#builder(java.net.URI)}.
	 */
	@Test
	void testBuilder() {
		final LocalDateTime checkDate = LocalDateTime.now().minusDays(7);
		final ILogMessage message1 = mock();
		final ILogMessage message2 = mock();
		final ILogMessage message3 = mock();
		final ILogMessage message4 = mock();
		final IVulnerabilityReportSection section1 = mock();
		final IVulnerabilityReportSection section2 = mock();
		final IVulnerabilityReportSection section3 = mock();
		final IVulnerabilityReportSection section4 = mock();
		final IVulnerabilityReport report = VulnerabilityReport.builder(this.stylesheetURI)
			.withCheckDate(checkDate)
			.addMessage(message1)
			.addMessages(List.of(message2, message3, message4))
			.addSection(section1)
			.addSections(List.of(section2, section3, section4))
			.build();
		assertEquals(this.stylesheetURI, report.getStylesheetURI());
		assertEquals("foobar.xslt", report.getStylesheetFilename());
		assertEquals(checkDate, report.getCheckDate());
		assertEquals(4, report.getMessages().size());
		// order of messages is not relevant
		assertTrue(report.getMessages().contains(message1));
		assertTrue(report.getMessages().contains(message2));
		assertTrue(report.getMessages().contains(message3));
		assertTrue(report.getMessages().contains(message4));
		assertEquals(4, report.getSections().size());
		// order must be kept
		assertSame(section1, report.getSections().get(0));
		assertSame(section2, report.getSections().get(1));
		assertSame(section3, report.getSections().get(2));
		assertSame(section4, report.getSections().get(3));
	}

	/**
	 * Test method for {@link org.x2vc.report.VulnerabilityReport#getTotalNumberOfIssues()}.
	 */
	@Test
	void testGetTotalNumberOfIssues() {
		final IVulnerabilityReportIssue issue1a = mock();
		final IVulnerabilityReportIssue issue1b = mock();
		final IVulnerabilityReportSection section1 = mock();
		when(section1.getIssues()).thenReturn(ImmutableList.of(issue1a, issue1b));

		final IVulnerabilityReportSection section2 = mock();
		when(section2.getIssues()).thenReturn(ImmutableList.of());

		final IVulnerabilityReportIssue issue3a = mock();
		final IVulnerabilityReportIssue issue3b = mock();
		final IVulnerabilityReportIssue issue3c = mock();
		final IVulnerabilityReportSection section3 = mock();
		when(section3.getIssues()).thenReturn(ImmutableList.of(issue3a, issue3b, issue3c));

		final IVulnerabilityReport report = VulnerabilityReport.builder(this.stylesheetURI)
			.addSections(List.of(section1, section2, section3))
			.build();

		assertEquals(5, report.getTotalNumberOfIssues());
	}

	/**
	 * Test method for JAXB serialization.
	 *
	 * @throws JAXBException
	 */
	@Test
	void testSerialization() throws JAXBException {
		final LocalDateTime checkDate = LocalDateTime.of(2023, 01, 02, 03, 04, 06);
		final VulnerabilityReport report = VulnerabilityReport.builder(this.stylesheetURI)
			.withCheckDate(checkDate)
			.withCodeCoverage(Lists.newArrayList(
					new LineCoverage(1, "foo", CoverageStatus.EMPTY),
					new LineCoverage(2, "bar", CoverageStatus.NONE),
					new LineCoverage(3, "baz", CoverageStatus.PARTIAL),
					new LineCoverage(4, "boo", CoverageStatus.FULL)))
			.withCoverageStatistics(CoverageStatistics.builder()
				.withTotalDirectiveCount(200)
				.withFullCoverageDirectiveCount(100)
				.withPartialCoverageDirectiveCount(75)
				.withNoCoverageDirectiveCount(25)
				.withTotalLineCount(400)
				.withEmptyLineCount(50)
				.withFullCoverageLineCount(250)
				.withPartialCoverageLineCount(75)
				.withNoCoverageLineCount(25)
				.build())
			.addMessage(new LogMessage(Level.WARN, "thread", "message"))
			.addSection(VulnerabilityReportSection.builder()
				.withHeading("A head")
				.withIntroduction("A intro")
				.withDescription("A desc")
				.withCountermeasures("A cm")
				.addIssue(VulnerabilityReportIssue.builder()
					.withAffectedOutputElement("A1 output")
					.addAffectingInputElement("A1 input1")
					.addAffectingInputElement("A1 input2")
					.addExample("A1 inputSample1", "A1 outputSample1")
					.addExample("A1 inputSample2", "A1 outputSample2")
					.build())
				.addIssue(VulnerabilityReportIssue.builder()
					.withAffectedOutputElement("A2 output")
					.addAffectingInputElement("A2 input1")
					.addAffectingInputElement("A2 input2")
					.addExample("A2 inputSample1", "A2 outputSample1")
					.addExample("A2 inputSample2", "A2 outputSample2")
					.build())
				.build())
			.addSection(VulnerabilityReportSection.builder()
				.withHeading("B head")
				.withIntroduction("B intro")
				.withDescription("B desc")
				.withCountermeasures("B cm")
				.addIssue(VulnerabilityReportIssue.builder()
					.withAffectedOutputElement("B1 output")
					.addAffectingInputElement("B1 input1")
					.addAffectingInputElement("B1 input2")
					.addExample("B1 inputSample1", "B1 outputSample1")
					.addExample("B1 inputSample2", "B1 outputSample2")
					.build())
				.addIssue(VulnerabilityReportIssue.builder()
					.withAffectedOutputElement("B2 output")
					.addAffectingInputElement("B2 input1")
					.addAffectingInputElement("B2 input2")
					.addExample("B2 inputSample1", "B2 outputSample1")
					.addExample("B2 inputSample2", "B2 outputSample2")
					.build())
				.build())
			.build();

		final JAXBContext context = JAXBContext.newInstance(VulnerabilityReport.class);
		final Marshaller marshaller = context.createMarshaller();
		marshaller.setProperty(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);
		final StringWriter writer = new StringWriter();
		marshaller.marshal(report, writer);

		final String actualOutput = writer.toString();
		final String expectedOutput = """
											<vulnerabilityReport checkDate="2023-01-02T03:04:06" stylesheetFilename="foobar.xslt" stylesheetURI="file:///foo/bar/foobar.xslt" totalIssues="4">
											    <coverage>
											        <byDirective>
											            <totalCount>200</totalCount>
											            <fullCoverageCount>100</fullCoverageCount>
											            <partialCoverageCount>75</partialCoverageCount>
											            <noCoverageCount>25</noCoverageCount>
											            <fullCoveragePercentage>50.0</fullCoveragePercentage>
											            <partialCoveragePercentage>37.5</partialCoveragePercentage>
											            <noCoveragePercentage>12.5</noCoveragePercentage>
											        </byDirective>
											        <byLine>
											            <totalCount>400</totalCount>
											            <emptyCount>50</emptyCount>
											            <fullCoverageCount>250</fullCoverageCount>
											            <partialCoverageCount>75</partialCoverageCount>
											            <noCoverageCount>25</noCoverageCount>
											            <emptyPercentage>12.5</emptyPercentage>
											            <fullCoveragePercentage>62.5</fullCoveragePercentage>
											            <partialCoveragePercentage>18.75</partialCoveragePercentage>
											            <noCoveragePercentage>6.25</noCoveragePercentage>
											        </byLine>
											    </coverage>
											    <sections>
											        <section>
											            <heading>A head</heading>
											            <introduction>A intro</introduction>
											            <description>A desc</description>
											            <countermeasures>A cm</countermeasures>
											            <issues>
											                <issue>
											                    <affectedOutputElement>A1 output</affectedOutputElement>
											                    <affectingInputElements>
											                        <element>A1 input1</element>
											                        <element>A1 input2</element>
											                    </affectingInputElements>
											                    <examples>
											                        <example>
											                        	<input>A1 inputSample1</input>
											                        	<output>A1 outputSample1</output>
											                        </example>
											                        <example>
											                        	<input>A1 inputSample2</input>
											                        	<output>A1 outputSample2</output>
											                        </example>
											                    </examples>
											                </issue>
											                <issue>
											                    <affectedOutputElement>A2 output</affectedOutputElement>
											                    <affectingInputElements>
											                        <element>A2 input2</element>
											                        <element>A2 input1</element>
											                    </affectingInputElements>
											                    <examples>
											                        <example>
											                        	<input>A2 inputSample1</input>
											                        	<output>A2 outputSample1</output>
											                        </example>
											                        <example>
											                        	<input>A2 inputSample2</input>
											                        	<output>A2 outputSample2</output>
											                        </example>
											                    </examples>
											                </issue>
											            </issues>
											        </section>
											        <section>
											            <heading>B head</heading>
											            <introduction>B intro</introduction>
											            <description>B desc</description>
											            <countermeasures>B cm</countermeasures>
											            <issues>
											                <issue>
											                    <affectedOutputElement>B1 output</affectedOutputElement>
											                    <affectingInputElements>
											                        <element>B1 input2</element>
											                        <element>B1 input1</element>
											                    </affectingInputElements>
											                    <examples>
											                        <example>
											                        	<input>B1 inputSample1</input>
											                        	<output>B1 outputSample1</output>
											                        </example>
											                        <example>
											                        	<input>B1 inputSample2</input>
											                        	<output>B1 outputSample2</output>
											                        </example>
											                    </examples>
											                </issue>
											                <issue>
											                    <affectedOutputElement>B2 output</affectedOutputElement>
											                    <affectingInputElements>
											                        <element>B2 input1</element>
											                        <element>B2 input2</element>
											                    </affectingInputElements>
											                    <examples>
											                        <example>
											                        	<input>B2 inputSample1</input>
											                        	<output>B2 outputSample1</output>
											                        </example>
											                        <example>
											                        	<input>B2 inputSample2</input>
											                        	<output>B2 outputSample2</output>
											                        </example>
											                    </examples>
											                </issue>
											            </issues>
											        </section>
											    </sections>
											    <codeCoverage>
											        <line number="1" coverage="EMPTY">foo</line>
											        <line number="2" coverage="NONE">bar</line>
											        <line number="3" coverage="PARTIAL">baz</line>
											        <line number="4" coverage="FULL">boo</line>
											    </codeCoverage>
											    <messages>
											    	<message level="WARN" thread="thread">message</message>
											    </messages>
											</vulnerabilityReport>
										""";
		assertXMLEquals(expectedOutput, actualOutput);
	}

	/**
	 * Test method for JAXB deserialization.
	 *
	 * @throws JAXBException
	 */
	@Test
	void testDeserialization() throws JAXBException {
		final String input = """
									<vulnerabilityReport checkDate="2023-01-02T03:04:06" stylesheetFilename="foobar.xslt" stylesheetURI="file:///foo/bar/foobar.xslt" totalIssues="4">
										<coverage>
										    <byDirective>
										        <totalCount>200</totalCount>
										        <fullCoverageCount>100</fullCoverageCount>
										        <partialCoverageCount>75</partialCoverageCount>
										        <noCoverageCount>25</noCoverageCount>
										        <fullCoveragePercentage>50.0</fullCoveragePercentage>
										        <partialCoveragePercentage>37.5</partialCoveragePercentage>
										        <noCoveragePercentage>12.5</noCoveragePercentage>
										    </byDirective>
										    <byLine>
										        <totalCount>400</totalCount>
										        <emptyCount>50</emptyCount>
										        <fullCoverageCount>250</fullCoverageCount>
										        <partialCoverageCount>75</partialCoverageCount>
										        <noCoverageCount>25</noCoverageCount>
										        <emptyPercentage>12.5</emptyPercentage>
										        <fullCoveragePercentage>62.5</fullCoveragePercentage>
										        <partialCoveragePercentage>18.75</partialCoveragePercentage>
										        <noCoveragePercentage>6.25</noCoveragePercentage>
										    </byLine>
										</coverage>
											    <sections>
											        <section>
											            <heading>A head</heading>
											            <introduction>A intro</introduction>
											            <description>A desc</description>
											            <countermeasures>A cm</countermeasures>
											            <issues>
											                <issue>
											                    <affectedOutputElement>A1 output</affectedOutputElement>
											                    <affectingInputElements>
											                        <element>A1 input1</element>
											                        <element>A1 input2</element>
											                    </affectingInputElements>
											                    <examples>
											                        <example>
											                        	<input>A1 inputSample1</input>
											                        	<output>A1 outputSample1</output>
											                        </example>
											                        <example>
											                        	<input>A1 inputSample2</input>
											                        	<output>A1 outputSample2</output>
											                        </example>
											                    </examples>
											                </issue>
											                <issue>
											                    <affectedOutputElement>A2 output</affectedOutputElement>
											                    <affectingInputElements>
											                        <element>A2 input2</element>
											                        <element>A2 input1</element>
											                    </affectingInputElements>
											                    <examples>
											                        <example>
											                        	<input>A2 inputSample1</input>
											                        	<output>A2 outputSample1</output>
											                        </example>
											                        <example>
											                        	<input>A2 inputSample2</input>
											                        	<output>A2 outputSample2</output>
											                        </example>
											                    </examples>
											                </issue>
											            </issues>
											        </section>
											        <section>
											            <heading>B head</heading>
											            <introduction>B intro</introduction>
											            <description>B desc</description>
											            <countermeasures>B cm</countermeasures>
											            <issues>
											                <issue>
											                    <affectedOutputElement>B1 output</affectedOutputElement>
											                    <affectingInputElements>
											                        <element>B1 input2</element>
											                        <element>B1 input1</element>
											                    </affectingInputElements>
											                    <examples>
											                        <example>
											                        	<input>B1 inputSample1</input>
											                        	<output>B1 outputSample1</output>
											                        </example>
											                        <example>
											                        	<input>B1 inputSample2</input>
											                        	<output>B1 outputSample2</output>
											                        </example>
											                    </examples>
											                </issue>
											                <issue>
											                    <affectedOutputElement>B2 output</affectedOutputElement>
											                    <affectingInputElements>
											                        <element>B2 input1</element>
											                        <element>B2 input2</element>
											                    </affectingInputElements>
											                    <examples>
											                        <example>
											                        	<input>B2 inputSample1</input>
											                        	<output>B2 outputSample1</output>
											                        </example>
											                        <example>
											                        	<input>B2 inputSample2</input>
											                        	<output>B2 outputSample2</output>
											                        </example>
											                    </examples>
											                </issue>
											            </issues>
											        </section>
											    </sections>
										<codeCoverage>
									        <line number="1" coverage="EMPTY">foo</line>
									        <line number="2" coverage="NONE">bar</line>
									        <line number="3" coverage="PARTIAL">baz</line>
									        <line number="4" coverage="FULL">boo</line>
									    </codeCoverage>
									    <messages>
									    	<message level="WARN" thread="thread">message</message>
									    </messages>
									</vulnerabilityReport>
								""";

		final JAXBContext context = JAXBContext.newInstance(VulnerabilityReport.class);
		final Unmarshaller unmarshaller = context.createUnmarshaller();
		final VulnerabilityReport actualReport = (VulnerabilityReport) unmarshaller.unmarshal(new StringReader(input));

		final LocalDateTime checkDate = LocalDateTime.of(2023, 01, 02, 03, 04, 06);
		final VulnerabilityReport expectedReport = VulnerabilityReport.builder(this.stylesheetURI)
			.withCheckDate(checkDate)
			.withCodeCoverage(Lists.newArrayList(
					new LineCoverage(1, "foo", CoverageStatus.EMPTY),
					new LineCoverage(2, "bar", CoverageStatus.NONE),
					new LineCoverage(3, "baz", CoverageStatus.PARTIAL),
					new LineCoverage(4, "boo", CoverageStatus.FULL)))
			.withCoverageStatistics(CoverageStatistics.builder()
				.withTotalDirectiveCount(200)
				.withFullCoverageDirectiveCount(100)
				.withPartialCoverageDirectiveCount(75)
				.withNoCoverageDirectiveCount(25)
				.withTotalLineCount(400)
				.withEmptyLineCount(50)
				.withFullCoverageLineCount(250)
				.withPartialCoverageLineCount(75)
				.withNoCoverageLineCount(25)
				.build())
			.addMessage(new LogMessage(Level.WARN, "thread", "message"))
			.addSection(VulnerabilityReportSection.builder()
				.withHeading("A head")
				.withIntroduction("A intro")
				.withDescription("A desc")
				.withCountermeasures("A cm")
				.addIssue(VulnerabilityReportIssue.builder()
					.withAffectedOutputElement("A1 output")
					.addAffectingInputElement("A1 input1")
					.addAffectingInputElement("A1 input2")
					.addExample("A1 inputSample1", "A1 outputSample1")
					.addExample("A1 inputSample2", "A1 outputSample2")
					.build())
				.addIssue(VulnerabilityReportIssue.builder()
					.withAffectedOutputElement("A2 output")
					.addAffectingInputElement("A2 input1")
					.addAffectingInputElement("A2 input2")
					.addExample("A2 inputSample1", "A2 outputSample1")
					.addExample("A2 inputSample2", "A2 outputSample2")
					.build())
				.build())
			.addSection(VulnerabilityReportSection.builder()
				.withHeading("B head")
				.withIntroduction("B intro")
				.withDescription("B desc")
				.withCountermeasures("B cm")
				.addIssue(VulnerabilityReportIssue.builder()
					.withAffectedOutputElement("B1 output")
					.addAffectingInputElement("B1 input1")
					.addAffectingInputElement("B1 input2")
					.addExample("B1 inputSample1", "B1 outputSample1")
					.addExample("B1 inputSample2", "B1 outputSample2")
					.build())
				.addIssue(VulnerabilityReportIssue.builder()
					.withAffectedOutputElement("B2 output")
					.addAffectingInputElement("B2 input1")
					.addAffectingInputElement("B2 input2")
					.addExample("B2 inputSample1", "B2 outputSample1")
					.addExample("B2 inputSample2", "B2 outputSample2")
					.build())
				.build())
			.build();

		assertEquals(expectedReport, actualReport);
	}

	/**
	 * Test method for {@link org.x2vc.report.VulnerabilityReport#equals(java.lang.Object)}.
	 */
	@Test
	void testEqualsObject() {
		EqualsVerifier.forClass(VulnerabilityReport.class)
			.verify();
	}

}
