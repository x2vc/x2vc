package org.x2vc.report;

/*-
 * #%L
 * x2vc - XSLT XSS Vulnerability Checker
 * %%
 * Copyright (C) 2023 x2vc authors and contributors
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.mockito.Mockito.mock;

import java.net.URI;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.junit.jupiter.MockitoExtension;
import org.x2vc.utilities.URIUtilities;
import org.x2vc.utilities.URIUtilities.ObjectType;

import com.google.common.collect.ImmutableSet;

@ExtendWith(MockitoExtension.class)
class VulnerabilityCandidateCollectorTest {

	/**
	 * Test method for
	 * {@link org.x2vc.report.VulnerabilityCandidateCollector#add(java.net.URI, org.x2vc.report.IVulnerabilityCandidate)}
	 * and
	 * {@link org.x2vc.report.VulnerabilityCandidateCollector#get(java.net.URI, java.lang.String)}.
	 */
	@Test
	void testAddGet() {
		final IVulnerabilityCandidateCollector collector = new VulnerabilityCandidateCollector();

		final URI stylesheetFoo = URIUtilities.makeMemoryURI(ObjectType.STYLESHEET, "foo");
		final IVulnerabilityCandidate candidateFooObject1 = mock();
		collector.add(stylesheetFoo, candidateFooObject1);
		final IVulnerabilityCandidate candidateFooObject2 = mock();
		collector.add(stylesheetFoo, candidateFooObject2);

		final URI stylesheetBar = URIUtilities.makeMemoryURI(ObjectType.STYLESHEET, "bar");
		final IVulnerabilityCandidate candidateBarObject1 = mock();
		collector.add(stylesheetBar, candidateBarObject1);
		final IVulnerabilityCandidate candidateBarObject2 = mock();
		collector.add(stylesheetBar, candidateBarObject2);
		final IVulnerabilityCandidate candidateBarObject3 = mock();
		collector.add(stylesheetBar, candidateBarObject3);
		final IVulnerabilityCandidate candidateBarObject4 = mock();
		collector.add(stylesheetBar, candidateBarObject4);

		final ImmutableSet<IVulnerabilityCandidate> candidatesFoo = collector.get(stylesheetFoo);
		assertEquals(2, candidatesFoo.size());
		assertTrue(candidatesFoo.contains(candidateFooObject1));
		assertTrue(candidatesFoo.contains(candidateFooObject2));

		final ImmutableSet<IVulnerabilityCandidate> candidatesBar = collector.get(stylesheetBar);
		assertEquals(4, candidatesBar.size());
		assertTrue(candidatesBar.contains(candidateBarObject1));
		assertTrue(candidatesBar.contains(candidateBarObject2));
		assertTrue(candidatesBar.contains(candidateBarObject3));
		assertTrue(candidatesBar.contains(candidateBarObject4));

		final URI stylesheetBaz = URIUtilities.makeMemoryURI(ObjectType.STYLESHEET, "baz");
		final ImmutableSet<IVulnerabilityCandidate> candidatesBaz = collector.get(stylesheetBaz);
		assertEquals(0, candidatesBaz.size());
	}

}
