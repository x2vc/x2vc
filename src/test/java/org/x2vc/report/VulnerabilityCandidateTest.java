/*-
 * #%L
 * x2vc - XSLT XSS Vulnerability Checker
 * %%
 * Copyright (C) 2023 x2vc authors and contributors
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */
package org.x2vc.report;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.mockito.Mockito.mock;
import static org.mockito.Mockito.verify;

import java.util.UUID;
import java.util.function.Consumer;

import org.junit.jupiter.api.Test;

import nl.jqno.equalsverifier.EqualsVerifier;

class VulnerabilityCandidateTest {

	/**
	 * Test method for {@link org.x2vc.report.VulnerabilityCandidate#builder()} and the associated builder class.
	 */
	@Test
	void testBuilder() {
		final var taskID = UUID.randomUUID();
		final var schemaObjectID = UUID.randomUUID();
		final IVulnerabilityCandidate candidate = VulnerabilityCandidate.builder("analyzerRuleID", taskID)
			.withAffectingSchemaObject(schemaObjectID)
			.withAffectedOutputElement("outputElement")
			.withInputSample("inputSample")
			.withOutputSample("outputSample")
			.build();
		assertEquals("analyzerRuleID", candidate.getAnalyzerRuleID());
		assertEquals(taskID, candidate.getTaskID());
		assertEquals(schemaObjectID, candidate.getAffectingSchemaObject());
		assertEquals("outputElement", candidate.getAffectedOutputElement());
		assertEquals("inputSample", candidate.getInputSample());
		assertEquals("outputSample", candidate.getOutputSample());
	}

	/**
	 * Test method for {@link org.x2vc.report.VulnerabilityCandidate#sendTo()}.
	 */
	@Test
	void testSendTo() {
		final IVulnerabilityCandidate candidate = VulnerabilityCandidate.builder("analyzerRuleID", UUID.randomUUID())
			.build();
		final Consumer<IVulnerabilityCandidate> consumer = mock();
		candidate.sendTo(consumer);
		verify(consumer).accept(candidate);
	}

	/**
	 * Test method for {@link org.x2vc.report.VulnerabilityCandidate#equals(java.lang.Object)}.
	 */
	@Test
	void testEqualsObject() {
		EqualsVerifier.forClass(VulnerabilityCandidate.class).verify();
	}

}
