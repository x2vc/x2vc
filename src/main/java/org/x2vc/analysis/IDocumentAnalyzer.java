package org.x2vc.analysis;

/*-
 * #%L
 * x2vc - XSLT XSS Vulnerability Checker
 * %%
 * Copyright (C) 2023 x2vc authors and contributors
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */

import java.net.URI;
import java.util.Set;
import java.util.UUID;
import java.util.function.Consumer;

import org.x2vc.processor.IHTMLDocumentContainer;
import org.x2vc.report.IVulnerabilityCandidate;
import org.x2vc.report.IVulnerabilityReport;
import org.x2vc.stylesheet.coverage.ICoverageStatistics;
import org.x2vc.stylesheet.coverage.ILineCoverage;
import org.x2vc.xml.document.IDocumentModifier;
import org.x2vc.xml.document.IXMLDocumentDescriptor;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;

/**
 * This component processes the HTML document and examines each context that offers a potential for XSS injection.
 *
 * The contents are checked with the help of the {@link IXMLDocumentDescriptor}. If the XML data descriptor points to
 * values injected by the XSS vulnerability check in a previous release, these are checked first. If the injected
 * contents are found in the HTML document without appropriate content sanitization, a vulnerability is reported.
 *
 * If a critical context contains data that can be influenced by user input, a set of possible XSS attack values are
 * generated in the form of input data requests.
 */
public interface IDocumentAnalyzer {

	/**
	 * @return a list of all the rule IDs registered to the document analyzer
	 */
	ImmutableSet<String> getRuleIDs();

	/**
	 * Analyze a HTML document and check for potential XSS vulnerabilities.
	 *
	 * @param taskID                 the ID of the task being executed
	 * @param container              the document to analyze
	 * @param modifierCollector      a sink to handle the modification requests issued by the analyzer
	 * @param vulnerabilityCollector a sink to process the vulnerability reports generated by the analyzer
	 */
	void analyzeDocument(UUID taskID, IHTMLDocumentContainer container, Consumer<IDocumentModifier> modifierCollector,
			Consumer<IVulnerabilityCandidate> vulnerabilityCollector);

	/**
	 * Combines the {@link IVulnerabilityCandidate}s generated using
	 * {@link IDocumentAnalyzer#analyzeDocument(UUID, IHTMLDocumentContainer, Consumer, Consumer)} and produces a report
	 * document. Note that the input set may be empty, in which case a report consisting of "no findings" sections is
	 * supposed to be generated.
	 *
	 * @param stylesheetURI
	 * @param candidates
	 * @param coverageStatistics
	 * @param codeCoverage
	 * @return a consolidated vulnerability report
	 */
	IVulnerabilityReport consolidateResults(URI stylesheetURI, Set<IVulnerabilityCandidate> candidates,
			ICoverageStatistics coverageStatistics, ImmutableList<ILineCoverage> codeCoverage);

}
