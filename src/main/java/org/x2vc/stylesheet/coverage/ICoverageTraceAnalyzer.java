/*-
 * #%L
 * x2vc - XSLT XSS Vulnerability Checker
 * %%
 * Copyright (C) 2023 x2vc authors and contributors
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */
package org.x2vc.stylesheet.coverage;

import java.net.URI;

import org.x2vc.processor.IHTMLDocumentContainer;

import com.google.common.collect.ImmutableList;
import com.google.inject.ImplementedBy;

/**
 * This component uses the trace output generated by the XSLT processor to determine which parts of the stylesheet were
 * traversed while producing an output element.
 */
@ImplementedBy(CoverageTraceAnalyzer.class)
public interface ICoverageTraceAnalyzer {

	/**
	 * Analyze a HTML document and add the coverage information to the analyzer data.
	 *
	 * @param taskID        the ID of the task being executed
	 * @param htmlContainer the document to analyze
	 */
	void analyzeDocument(IHTMLDocumentContainer htmlContainer);

	/**
	 * @param stylesheetURI
	 * @return the coverage information for all directives as a list ordered by position of the directive
	 */
	ImmutableList<IDirectiveCoverage> getDirectiveCoverage(URI stylesheetURI);

	/**
	 * @param stylesheetURI
	 * @return the coverage information for all lines (with the array index being the line number minus one)
	 */
	CoverageStatus[] getLineCoverage(URI stylesheetURI);

	/**
	 * @param stylesheetURI
	 * @return the coverage statistics for the stylesheet
	 */
	ICoverageStatistics getStatistics(URI stylesheetURI);

	/**
	 * @param stylesheetURI
	 * @return the code coverage information - essentially the output of {@link #getLineCoverage(URI)} combined with the
	 *         actual source code
	 */
	ImmutableList<ILineCoverage> getCodeCoverage(URI stylesheetURI);

}
