/*-
 * #%L
 * x2vc - XSLT XSS Vulnerability Checker
 * %%
 * Copyright (C) 2023 x2vc authors and contributors
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */
package org.x2vc.process.tasks;


import java.io.File;
import java.util.Optional;
import java.util.UUID;
import java.util.function.BiConsumer;
import java.util.function.Consumer;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.x2vc.analysis.IDocumentAnalyzer;
import org.x2vc.processor.IHTMLDocumentContainer;
import org.x2vc.processor.IXSLTProcessor;
import org.x2vc.report.IVulnerabilityCandidate;
import org.x2vc.report.IVulnerabilityCandidateCollector;
import org.x2vc.schema.ISchemaManager;
import org.x2vc.schema.structure.IXMLSchema;
import org.x2vc.stylesheet.IStylesheetInformation;
import org.x2vc.stylesheet.IStylesheetManager;
import org.x2vc.stylesheet.coverage.ICoverageTraceAnalyzer;
import org.x2vc.utilities.IDebugObjectWriter;
import org.x2vc.xml.document.IDocumentGenerator;
import org.x2vc.xml.document.IDocumentModifier;
import org.x2vc.xml.document.IXMLDocumentContainer;
import org.x2vc.xml.request.ICompletedRequestRegistry;
import org.x2vc.xml.request.IDocumentRequest;
import org.x2vc.xml.request.IRequestGenerator;
import org.x2vc.xml.request.MixedContentGenerationMode;

import com.google.inject.assistedinject.Assisted;
import com.google.inject.assistedinject.AssistedInject;

import net.sf.saxon.s9api.SaxonApiException;

/**
 * This task is used to process a single {@link IDocumentRequest} and follow up on the results depending on the
 * {@link ProcessingMode}.
 */
public class VulnerabilityCheckTask extends AbstractTask implements IVulnerabilityCheckTask {

	private static final Logger logger = LogManager.getLogger();

	private IStylesheetManager stylesheetManager;
	private ISchemaManager schemaManager;
	private IDocumentGenerator documentGenerator;
	private IXSLTProcessor processor;
	private IDocumentAnalyzer analyzer;
	private IRequestGenerator requestGenerator;
	private ICompletedRequestRegistry completedRequestRegistry;
	private IDebugObjectWriter debugObjectWriter;
	private IVulnerabilityCandidateCollector vulnerabilityCandidateCollector;
	private ICoverageTraceAnalyzer coverageTraceAnalyzer;
	private IDocumentRequest request;
	private Consumer<IDocumentRequest> requestCollector;
	private BiConsumer<UUID, Boolean> callback;

	int nextCandidateNumber = 1;

	@SuppressWarnings("java:S107") // large number of parameters due to dependency injection
	@AssistedInject
	VulnerabilityCheckTask(IStylesheetManager stylesheetManager, ISchemaManager schemaManager,
			IDocumentGenerator documentGenerator, IXSLTProcessor processor, IDocumentAnalyzer analyzer,
			IRequestGenerator requestGenerator, ICompletedRequestRegistry completedRequestRegistry,
			IDebugObjectWriter debugObjectWriter, IVulnerabilityCandidateCollector vulnerabilityCandidateCollector,
			ICoverageTraceAnalyzer coverageTraceAnalyzer,
			@Assisted File xsltFile,
			@Assisted Consumer<IDocumentRequest> requestCollector,
			@Assisted BiConsumer<UUID, Boolean> callback) {
		super(xsltFile);
		this.stylesheetManager = stylesheetManager;
		this.schemaManager = schemaManager;
		this.documentGenerator = documentGenerator;
		this.processor = processor;
		this.analyzer = analyzer;
		this.requestGenerator = requestGenerator;
		this.completedRequestRegistry = completedRequestRegistry;
		this.debugObjectWriter = debugObjectWriter;
		this.vulnerabilityCandidateCollector = vulnerabilityCandidateCollector;
		this.coverageTraceAnalyzer = coverageTraceAnalyzer;
		this.request = null;
		this.requestCollector = requestCollector;
		this.callback = callback;
	}

	@SuppressWarnings("java:S107") // large number of parameters due to dependency injection
	@AssistedInject
	VulnerabilityCheckTask(IStylesheetManager stylesheetManager, ISchemaManager schemaManager,
			IDocumentGenerator documentGenerator, IXSLTProcessor processor, IDocumentAnalyzer analyzer,
			IRequestGenerator requestGenerator, ICompletedRequestRegistry completedRequestRegistry,
			IDebugObjectWriter debugObjectWriter, IVulnerabilityCandidateCollector vulnerabilityCandidateCollector,
			ICoverageTraceAnalyzer coverageTraceAnalyzer,
			@Assisted File xsltFile,
			@Assisted IDocumentRequest request,
			@Assisted Consumer<IDocumentRequest> requestCollector,
			@Assisted BiConsumer<UUID, Boolean> callback) {
		super(xsltFile);
		this.stylesheetManager = stylesheetManager;
		this.schemaManager = schemaManager;
		this.documentGenerator = documentGenerator;
		this.processor = processor;
		this.analyzer = analyzer;
		this.requestGenerator = requestGenerator;
		this.completedRequestRegistry = completedRequestRegistry;
		this.debugObjectWriter = debugObjectWriter;
		this.vulnerabilityCandidateCollector = vulnerabilityCandidateCollector;
		this.coverageTraceAnalyzer = coverageTraceAnalyzer;
		this.request = request;
		this.requestCollector = requestCollector;
		this.callback = callback;
	}

	@Override
	public void execute() {
		logger.traceEntry("for task ID {}", this.getTaskID());
		try {
			if (this.request == null) {
				final IStylesheetInformation stylesheetInfo = this.stylesheetManager.get(this.getXSLTFile().toURI());
				final IXMLSchema schema = this.schemaManager.getSchema(stylesheetInfo.getURI());

				logger.debug("generating new request to explore schema usage of stylesheet {}",
						stylesheetInfo.getURI());
				this.request = this.requestGenerator.generateNewRequest(schema, MixedContentGenerationMode.FULL);
				this.debugObjectWriter.writeRequest(this.getTaskID(), this.request);
			}

			if (this.completedRequestRegistry.contains(this.request)) {
				logger.debug("eliminating duplicate request");
			} else {
				this.debugObjectWriter.writeRequest(this.getTaskID(), this.request);

				logger.debug("registering request as completed");
				this.completedRequestRegistry.register(this.request);

				logger.debug("generating XML document");
				final IXMLDocumentContainer xmlDocument = this.documentGenerator.generateDocument(this.request);
				this.debugObjectWriter.writeXMLDocument(this.getTaskID(), xmlDocument);

				logger.debug("processing XML to HTML");
				final IHTMLDocumentContainer htmlDocument = this.processor.processDocument(xmlDocument);
				this.debugObjectWriter.writeHTMLDocument(this.getTaskID(), htmlDocument);

				if (!htmlDocument.isFailed()) {
					logger.debug("analyzing HTML document produced by XSLT processor");
					this.analyzer.analyzeDocument(getTaskID(), htmlDocument,
							this::handleDocumentModificationRequest, this::handleVulnerabilityCandidate);
					logger.debug("recording execution trace events to produce coverage statistics");
					this.coverageTraceAnalyzer.analyzeDocument(htmlDocument);
				} else {
					final Optional<SaxonApiException> compilationError = htmlDocument.getCompilationError();
					final Optional<SaxonApiException> processingError = htmlDocument.getProcessingError();
					if (compilationError.isPresent()) {
						logger.debug("processing of XML to HTML failed with compilation error: {}",
								compilationError.get().getMessage());
					} else if (processingError.isPresent()) {
						logger.debug("processing of XML to HTML failed with processing error: {}",
								processingError.get().getMessage());
					} else {
						logger.debug("processing of XML to HTML failed other unspecified error");
					}
					this.callback.accept(this.getTaskID(), false);
				}
			}
			this.callback.accept(this.getTaskID(), true);
		} catch (final Exception ex) {
			logger.error("unhandled exception in request processing task", ex);
			this.callback.accept(this.getTaskID(), false);
		}
		logger.traceExit();
	}

	private void handleDocumentModificationRequest(IDocumentModifier modifier) {
		logger.traceEntry();
		logger.debug("adding new task for modification request");
		this.requestCollector
			.accept(this.requestGenerator.modifyRequest(this.request, modifier, MixedContentGenerationMode.FULL));
		logger.traceExit();
	}

	private void handleVulnerabilityCandidate(IVulnerabilityCandidate candidate) {
		logger.traceEntry();
		this.debugObjectWriter.writeVulnerabilityCandidate(this.getTaskID(), this.nextCandidateNumber, candidate);
		this.nextCandidateNumber++;
		logger.debug("storing vulnerability candidate for later processing");
		this.vulnerabilityCandidateCollector.add(this.request.getStylesheeURI(), candidate);
		logger.traceExit();
	}

}
