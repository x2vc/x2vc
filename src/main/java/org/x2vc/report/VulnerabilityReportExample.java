/*-
 * #%L
 * x2vc - XSLT XSS Vulnerability Checker
 * %%
 * Copyright (C) 2023 x2vc authors and contributors
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */
package org.x2vc.report;

import java.util.Objects;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;

import org.x2vc.utilities.jaxb.HTMLEscapingAdapter;

/**
 * Standard implementation of {@link IVulnerabilityReportExample}.
 */
public final class VulnerabilityReportExample implements IVulnerabilityReportExample {

	@XmlElement(name = "input")
	@XmlJavaTypeAdapter(HTMLEscapingAdapter.class)
	private final String inputSample;

	@XmlElement(name = "output")
	@XmlJavaTypeAdapter(HTMLEscapingAdapter.class)
	private final String outputSample;

	/**
	 * Default constructor required for JAXB operation.
	 */
	protected VulnerabilityReportExample() {
		this.inputSample = "";
		this.outputSample = "";
	}

	/**
	 * @param inputSample
	 * @param outputSample
	 */
	VulnerabilityReportExample(String inputSample, String outputSample) {
		super();
		this.inputSample = inputSample;
		this.outputSample = outputSample;
	}

	@Override
	public String getInputSample() {
		return this.inputSample;
	}

	@Override
	public String getOutputSample() {
		return this.outputSample;
	}

	@Override
	public String toString() {
		return "VulnerabilityReportExample [inputSample=" + this.inputSample + ", outputSample=" + this.outputSample
				+ "]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(this.inputSample, this.outputSample);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final VulnerabilityReportExample other = (VulnerabilityReportExample) obj;
		return Objects.equals(this.inputSample, other.inputSample)
				&& Objects.equals(this.outputSample, other.outputSample);
	}

}
