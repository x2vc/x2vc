package org.x2vc.report;

/*-
 * #%L
 * x2vc - XSLT XSS Vulnerability Checker
 * %%
 * Copyright (C) 2023 x2vc authors and contributors
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */

import java.util.Objects;
import java.util.UUID;
import java.util.function.Consumer;

import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlTransient;

/**
 * Standard implementation of {@link IVulnerabilityCandidate}.
 */
@XmlRootElement(name = "vulnerabilityCandidate")
public final class VulnerabilityCandidate implements IVulnerabilityCandidate {

	@XmlAttribute
	private final String analyzerRuleID;

	@XmlAttribute
	private final UUID affectingSchemaObject;

	@XmlAttribute
	private final String affectedOutputElement;

	@XmlElement(name = "inputSample")
	private final String inputSample;

	@XmlElement(name = "outputSample")
	private final String outputSample;

	@XmlTransient
	private final UUID taskID;

	private VulnerabilityCandidate(Builder builder) {
		this.analyzerRuleID = builder.analyzerRuleID;
		this.affectingSchemaObject = builder.affectingSchemaObject;
		this.affectedOutputElement = builder.affectedOutputElement;
		this.inputSample = builder.inputSample;
		this.outputSample = builder.outputSample;
		this.taskID = builder.taskID;
	}

	private VulnerabilityCandidate() {
		// only required for marshalling/unmarshalling
		this.analyzerRuleID = null;
		this.affectingSchemaObject = null;
		this.affectedOutputElement = null;
		this.inputSample = null;
		this.outputSample = null;
		this.taskID = null;
	}

	@Override
	public String getAnalyzerRuleID() {
		return this.analyzerRuleID;
	}

	@Override
	public UUID getAffectingSchemaObject() {
		return this.affectingSchemaObject;
	}

	@Override
	public String getAffectedOutputElement() {
		return this.affectedOutputElement;
	}

	@Override
	public String getInputSample() {
		return this.inputSample;
	}

	@Override
	public String getOutputSample() {
		return this.outputSample;
	}

	@Override
	public UUID getTaskID() {
		return this.taskID;
	}

	@Override
	public void sendTo(Consumer<IVulnerabilityCandidate> consumer) {
		consumer.accept(this);
	}

	/**
	 * Creates builder to build {@link VulnerabilityCandidate}.
	 *
	 * @param analyzerRuleID
	 * @param taskID
	 *
	 * @return created builder
	 */
	public static Builder builder(String analyzerRuleID, UUID taskID) {
		return new Builder(analyzerRuleID, taskID);
	}

	/**
	 * Builder to build {@link VulnerabilityCandidate}.
	 */
	public static final class Builder {
		private String analyzerRuleID;
		private UUID affectingSchemaObject;
		private String affectedOutputElement;
		private String inputSample;
		private String outputSample;
		private UUID taskID;

		/**
		 * Creates a new builder
		 *
		 * @param analyzerRuleID
		 * @param taskID
		 */
		private Builder(String analyzerRuleID, UUID taskID) {
			this.analyzerRuleID = analyzerRuleID;
			this.taskID = taskID;
		}

		/**
		 * Builder method for affectingSchemaObject parameter.
		 *
		 * @param affectingSchemaObject field to set
		 * @return builder
		 */
		public Builder withAffectingSchemaObject(UUID affectingSchemaObject) {
			this.affectingSchemaObject = affectingSchemaObject;
			return this;
		}

		/**
		 * Builder method for affectedOutputElement parameter.
		 *
		 * @param affectedOutputElement field to set
		 * @return builder
		 */
		public Builder withAffectedOutputElement(String affectedOutputElement) {
			this.affectedOutputElement = affectedOutputElement;
			return this;
		}

		/**
		 * Builder method for inputSample parameter.
		 *
		 * @param inputSample field to set
		 * @return builder
		 */
		public Builder withInputSample(String inputSample) {
			this.inputSample = inputSample;
			return this;
		}

		/**
		 * Builder method for outputSample parameter.
		 *
		 * @param outputSample field to set
		 * @return builder
		 */
		public Builder withOutputSample(String outputSample) {
			this.outputSample = outputSample;
			return this;
		}

		/**
		 * Builder method of the builder.
		 *
		 * @return built class
		 */
		public VulnerabilityCandidate build() {
			return new VulnerabilityCandidate(this);
		}

	}

	@Override
	public int hashCode() {
		return Objects.hash(this.affectedOutputElement, this.affectingSchemaObject, this.analyzerRuleID,
				this.inputSample, this.outputSample, this.taskID);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final VulnerabilityCandidate other = (VulnerabilityCandidate) obj;
		return Objects.equals(this.affectedOutputElement, other.affectedOutputElement)
				&& Objects.equals(this.affectingSchemaObject, other.affectingSchemaObject)
				&& Objects.equals(this.analyzerRuleID, other.analyzerRuleID)
				&& Objects.equals(this.inputSample, other.inputSample)
				&& Objects.equals(this.outputSample, other.outputSample) && Objects.equals(this.taskID, other.taskID);
	}
}
