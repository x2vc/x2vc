/*-
 * #%L
 * x2vc - XSLT XSS Vulnerability Checker
 * %%
 * Copyright (C) 2023 x2vc authors and contributors
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 *
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */
package org.x2vc.report;

import java.util.List;
import java.util.Objects;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.Lists;

/**
 * Standard implementation if {@link IVulnerabilityReportSection}.
 */
public final class VulnerabilityReportSection implements IVulnerabilityReportSection {

	@XmlElement
	private final String ruleID;

	@XmlElement
	private final String heading;

	@XmlElement
	private final String shortHeading;

	@XmlElement
	private final String introduction;

	@XmlElement
	private final String description;

	@XmlElement
	private final String countermeasures;

	@XmlElementWrapper(name = "issues")
	@XmlElement(name = "issue", type = VulnerabilityReportIssue.class)
	private final List<IVulnerabilityReportIssue> issues;

	private VulnerabilityReportSection(Builder builder) {
		this.ruleID = builder.ruleID;
		this.heading = builder.heading;
		this.shortHeading = builder.shortHeading;
		this.introduction = builder.introduction;
		this.description = builder.description;
		this.countermeasures = builder.countermeasures;
		this.issues = builder.issues;
	}

	@SuppressWarnings("java:S4738") // type required here
	private VulnerabilityReportSection() {
		this.ruleID = null;
		this.heading = null;
		this.shortHeading = null;
		this.introduction = null;
		this.description = null;
		this.countermeasures = null;
		this.issues = Lists.newArrayList();
	}

	@Override
	public String getRuleID() {
		return this.ruleID;
	}

	@Override
	public String getHeading() {
		return this.heading;
	}

	@Override
	public String getShortHeading() {
		return this.shortHeading;
	}

	@Override
	public String getIntroduction() {
		return this.introduction;
	}

	@Override
	public String getDescription() {
		return this.description;
	}

	@Override
	public String getCountermeasures() {
		return this.countermeasures;
	}

	@Override
	public ImmutableList<IVulnerabilityReportIssue> getIssues() {
		return ImmutableList.copyOf(this.issues);
	}

	/**
	 * Creates builder to build {@link VulnerabilityReportSection}.
	 *
	 * @return created builder
	 */
	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder to build {@link VulnerabilityReportSection}.
	 */
	public static final class Builder {
		private String ruleID;
		private String heading;
		private String shortHeading;
		private String introduction;
		private String description;
		private String countermeasures;
		private List<IVulnerabilityReportIssue> issues = Lists.newArrayList();

		private Builder() {
		}

		/**
		 * Builder method for ruleID parameter.
		 *
		 * @param ruleID field to set
		 * @return ruleID
		 */
		public Builder withRuleID(String ruleID) {
			this.ruleID = ruleID;
			return this;
		}

		/**
		 * Builder method for heading parameter.
		 *
		 * @param heading field to set
		 * @return builder
		 */
		public Builder withHeading(String heading) {
			this.heading = heading;
			return this;
		}

		/**
		 * Builder method for shortHeading parameter.
		 *
		 * @param shortHeading field to set
		 * @return builder
		 */
		public Builder withShortHeading(String shortHeading) {
			this.shortHeading = shortHeading;
			return this;
		}

		/**
		 * Builder method for introduction parameter.
		 *
		 * @param introduction field to set
		 * @return builder
		 */
		public Builder withIntroduction(String introduction) {
			this.introduction = introduction;
			return this;
		}

		/**
		 * Builder method for description parameter.
		 *
		 * @param description field to set
		 * @return builder
		 */
		public Builder withDescription(String description) {
			this.description = description;
			return this;
		}

		/**
		 * Builder method for countermeasures parameter.
		 *
		 * @param countermeasures field to set
		 * @return builder
		 */
		public Builder withCountermeasures(String countermeasures) {
			this.countermeasures = countermeasures;
			return this;
		}

		/**
		 * Builder method for issues parameter.
		 *
		 * @param issue field to set
		 * @return builder
		 */
		public Builder addIssue(IVulnerabilityReportIssue issue) {
			this.issues.add(issue);
			return this;
		}

		/**
		 * Builder method for issues parameter.
		 *
		 * @param issues field to set
		 * @return builder
		 */
		public Builder addIssues(List<IVulnerabilityReportIssue> issues) {
			this.issues.addAll(issues);
			return this;
		}

		/**
		 * Builder method of the builder.
		 *
		 * @return built class
		 */
		public IVulnerabilityReportSection build() {
			return new VulnerabilityReportSection(this);
		}
	}

	@Override
	public String toString() {
		return "VulnerabilityReportSection [ruleID=" + this.ruleID + ", heading=" + this.heading + "]";
	}

	@Override
	public int hashCode() {
		return Objects.hash(this.countermeasures, this.description, this.heading, this.introduction, this.issues,
				this.ruleID, this.shortHeading);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final VulnerabilityReportSection other = (VulnerabilityReportSection) obj;
		return Objects.equals(this.countermeasures, other.countermeasures)
				&& Objects.equals(this.description, other.description)
				&& Objects.equals(this.heading, other.heading) && Objects.equals(this.introduction, other.introduction)
				&& Objects.equals(this.issues, other.issues) && Objects.equals(this.ruleID, other.ruleID)
				&& Objects.equals(this.shortHeading, other.shortHeading);
	}

}
