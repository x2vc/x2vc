/*-
 * #%L
 * x2vc - XSLT XSS Vulnerability Checker
 * %%
 * Copyright (C) 2023 x2vc authors and contributors
 * %%
 * This program and the accompanying materials are made
 * available under the terms of the Eclipse Public License 2.0
 * which is available at https://www.eclipse.org/legal/epl-2.0/
 * 
 * SPDX-License-Identifier: EPL-2.0
 * #L%
 */
package org.x2vc.report;


import java.util.Collection;
import java.util.List;
import java.util.Objects;
import java.util.Set;

import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElementWrapper;

import com.google.common.collect.ImmutableList;
import com.google.common.collect.ImmutableSet;
import com.google.common.collect.Lists;
import com.google.common.collect.Sets;

/**
 * Standard implementation of {@link IVulnerabilityReportIssue}.
 */
public final class VulnerabilityReportIssue implements IVulnerabilityReportIssue {

	private final String affectedOutputElement;
	private final ImmutableSet<String> affectingInputElements;
	private final ImmutableList<IVulnerabilityReportExample> examples;

	private VulnerabilityReportIssue(Builder builder) {
		this.affectedOutputElement = builder.affectedOutputElement;
		this.affectingInputElements = ImmutableSet.copyOf(builder.affectingInputElements);
		this.examples = ImmutableList.copyOf(builder.examples);
	}

	@SuppressWarnings("java:S4738") // type required here
	private VulnerabilityReportIssue() {
		// default constructor to make JAXB happy
		this.affectedOutputElement = null;
		this.affectingInputElements = ImmutableSet.of();
		this.examples = ImmutableList.of();
	}

	@Override
	@XmlElement(name = "affectedOutputElement")
	public String getAffectedOutputElement() {
		return this.affectedOutputElement;
	}

	@Override
	@XmlElementWrapper(name = "affectingInputElements")
	@XmlElement(name = "element")
	public ImmutableSet<String> getAffectingInputElements() {
		return this.affectingInputElements;
	}

	@Override
	@XmlElementWrapper(name = "examples")
	@XmlElement(name = "example", type = VulnerabilityReportExample.class)
	public ImmutableList<IVulnerabilityReportExample> getExamples() {
		return this.examples;
	}

	@Override
	public int hashCode() {
		return Objects.hash(this.affectedOutputElement, this.affectingInputElements, this.examples);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}
		if (obj == null) {
			return false;
		}
		if (getClass() != obj.getClass()) {
			return false;
		}
		final VulnerabilityReportIssue other = (VulnerabilityReportIssue) obj;
		return Objects.equals(this.affectedOutputElement, other.affectedOutputElement)
				&& Objects.equals(this.affectingInputElements, other.affectingInputElements)
				&& Objects.equals(this.examples, other.examples);
	}

	/**
	 * Creates builder to build {@link VulnerabilityReportIssue}.
	 *
	 * @return created builder
	 */
	public static Builder builder() {
		return new Builder();
	}

	/**
	 * Builder to build {@link VulnerabilityReportIssue}.
	 */
	public static final class Builder {
		private String affectedOutputElement;
		private Set<String> affectingInputElements = Sets.newHashSet();
		private List<IVulnerabilityReportExample> examples = Lists.newArrayList();

		private Builder() {
		}

		/**
		 * Builder method for affectedOutputElement parameter.
		 *
		 * @param affectedOutputElement field to set
		 * @return builder
		 */
		public Builder withAffectedOutputElement(String affectedOutputElement) {
			this.affectedOutputElement = affectedOutputElement;
			return this;
		}

		/**
		 * Builder method for affectingInputElements parameter.
		 *
		 * @param affectingInputElement field to set
		 * @return builder
		 */
		public Builder addAffectingInputElement(String affectingInputElement) {
			this.affectingInputElements.add(affectingInputElement);
			return this;
		}

		/**
		 * Builder method for affectingInputElements parameter.
		 *
		 * @param affectingInputElements field to set
		 * @return builder
		 */
		public Builder addAffectingInputElements(Collection<String> affectingInputElements) {
			this.affectingInputElements.addAll(affectingInputElements);
			return this;
		}

		/**
		 * Builder method for examples parameter.
		 *
		 * @param example field to set
		 * @return builder
		 */
		public Builder addExample(IVulnerabilityReportExample example) {
			this.examples.add(example);
			return this;
		}

		/**
		 * Builder method for examples parameter.
		 *
		 * @param inputSample  an excerpt of the XML data that is relevant to understand the example
		 * @param outputSample an excerpt of the HTML document that shows the issue
		 * @return builder
		 */
		public Builder addExample(String inputSample, String outputSample) {
			this.examples.add(new VulnerabilityReportExample(inputSample, outputSample));
			return this;
		}

		/**
		 * Builder method of the builder.
		 *
		 * @return built class
		 */
		public IVulnerabilityReportIssue build() {
			return new VulnerabilityReportIssue(this);
		}
	}

}
