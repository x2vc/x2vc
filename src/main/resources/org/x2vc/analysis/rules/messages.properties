###
# #%L
# x2vc - XSLT XSS Vulnerability Checker
# %%
# Copyright (C) 2023 x2vc authors and contributors
# %%
# This program and the accompanying materials are made
# available under the terms of the Eclipse Public License 2.0
# which is available at https://www.eclipse.org/legal/epl-2.0/
#
# SPDX-License-Identifier: EPL-2.0
# #L%
###
AnalyzerRule.A_1.Default.Heading = Attribute Injection
AnalyzerRule.A_1.Default.ShortHeading = Attribute Injection
AnalyzerRule.A_1.Default.PlaceholderIntroduction = No possibility was identified to introduce additional attributes \
                                                   by manipulating the input data.
AnalyzerRule.A_1.Default.Introduction = This rule identifies errors in the XSLT program that allow for an attacker to \
                                        introduce attributes into the HTML output by manipulating the input. This may \
                                        cause unwanted JavaScript commands to be executed or other malfunctions to occur.
AnalyzerRule.A_1.Default.Description = When using XSLT, there are two ways to add entire attributes to the HTML output: \
                                       by using literal result elements or <code>xsl:attribute</code> directives. \
                                       Using the <code>xsl:attribute</code> directive provides the XSLT developer with \
                                       considerable flexibility when generating the output document since by using it, \
                                       existing literal result element attributes can be overwritten and new attributes \
                                       can be added. Both the attribute name and its value can be derived dynamically. \
                                       Depending on the exact formulation of the statement, it might be possible for an \
                                       attacker to manipulate the input data in a way that leads to additional malicious \
                                       attributes in the HTML output. For this reason, <code>xsl:attribute</code> directives \
                                       with a dynamic attribute name need to be checked for possible XSS vulnerabilities.
AnalyzerRule.A_1.Default.Countermeasures = If possible, convert the dynamic attribute name into a selection of fixed attributes, \
                                           e.g. using a <code>xsl:choose</code> expression to evaluate the input data. If that \
                                           is not practical, introduce additional checks to limit the attribute names to a \
                                           whitelist of non-critical attribute names.

AnalyzerRule.E_1.Default.Heading = Element Injection
AnalyzerRule.E_1.Default.ShortHeading = Element Injection
AnalyzerRule.E_1.Default.PlaceholderIntroduction = No possibility was identified to introduce additional elements \
                                                   by manipulating the input data.
AnalyzerRule.E_1.Default.Introduction = This rule identifies errors in the XSLT program that allow for an attacker to \
                                        introduce elements into the HTML output by manipulating the input. This may \
                                        cause unwanted JavaScript commands to be executed or other malfunctions to occur.
AnalyzerRule.E_1.Default.Description = When using XSLT, there are a number of ways to add entire elements to the HTML output: \
                                       by using literal result elements, <code>xsl:element</code> directives, copying parts \
                                       of the input document or disabling output escaping. \
                                       Using the <code>xsl:element</code> directive provides the XSLT developer with \
                                       considerable flexibility when generating the output document since the element name \
                                       can be derived dynamically. \
                                       Depending on the exact formulation of the statement, it might be possible for an \
                                       attacker to manipulate the input data in a way that leads to malicious \
                                       elements in the HTML output. For this reason, <code>xsl:element</code> directives \
                                       with a dynamic element name need to be checked for possible XSS vulnerabilities.
AnalyzerRule.E_1.Default.Countermeasures = If possible, convert the dynamic element name into a selection of fixed elements, \
                                           e.g. using a <code>xsl:choose</code> expression to evaluate the input data. If that \
                                           is not practical, introduce additional checks to limit the element names to a \
                                           whitelist of non-critical element names.

AnalyzerRule.E_2.Default.Heading = Unrestricted Copy Operation
AnalyzerRule.E_2.Default.ShortHeading = Unrestricted Copy Operation
AnalyzerRule.E_2.Default.PlaceholderIntroduction = No possibility was identified to introduce arbitrary code through an \
                                                   unfiltered copy of the input data.
AnalyzerRule.E_2.Default.Introduction = This rule identifies errors in the XSLT program that allow for an attacker to \
                                        introduce code into the HTML output by exploiting an operation to copy parts of the \
                                        input data straight into the HTML document without performing further filtering.
AnalyzerRule.E_2.Default.Description = When the input data contains preformatted sections of text, a common approach is to \
                                       use a <code>xsl:copy-of</code> directives to transfer the entire sub-tree of the input \
                                       document directly to the output. This makes it easy for an attacker to introduce \
                                       arbitrary content into the document if they can influence the input subtree in question. \
                                       The same issue can be introduced by improper use of the <code>xsl:copy</code> directive.
AnalyzerRule.E_2.Default.Countermeasures = Use a combination of <code>xsl:copy</code> and <code>xsl:apply-templates</code> \
                                           with a set of very restrictive <code>select</code> criteria (avoid <code>node()</code> \
                                           and <code>@*</code>) in order to whitelist the tags and attributes you want to be \
                                           transferred into the HTML document.

AnalyzerRule.E_3.Default.Heading = Disabled Output Escaping
AnalyzerRule.E_3.Default.ShortHeading = Disabled Output Escaping
AnalyzerRule.E_3.Default.PlaceholderIntroduction = No possibility was identified to introduce arbitrary code by exploiting \
                                                   disabled output escaping.
AnalyzerRule.E_3.Default.Introduction = This rule identifies errors in the XSLT program that allow for an attacker to \
                                        introduce code into the HTML output by exploiting a directive to disable the output
                                        escaping mechanism built into the XSLT processor.
AnalyzerRule.E_3.Default.Description = Normally, the XSLT processor will automatically encode entities like <code>&lt;</code> \
                                       that are produced by a <code>xsl:value-of</code> directive used to produce an output \
                                       text node. This is a basic XSS protection in itself since it prevents the introduction \
                                       or arbitrary elements from string input data. However, if that escaping mechanism is \
                                       disabled on purpose, it max be possible for an attacker to exploit this vector.
AnalyzerRule.E_3.Default.Countermeasures = Try to avoid disabling the output escaping if possible. If for some reason there is \
                                           a legitimate scenario for disabling the output escaping, the data inserted using the \
                                           <code>xsl:value-of</code> statement has to be screened either by the application \
                                           producing the input data or by implementing extensive (and unwieldy) checks in the \
                                           XSLT program.

AnalyzerRule.H_1.Default.Heading = JavaScript Handler Code Injection
AnalyzerRule.H_1.Default.ShortHeading = JS Handler Code Injection
AnalyzerRule.H_1.Default.PlaceholderIntroduction = No possibility was identified to inject code into JavaScript handlers.
AnalyzerRule.H_1.Default.Introduction = This rule identifies potential weaknesses in the XSLT program that allow for an attacker \
                                        to introduce code into JavaScript event handlers.
AnalyzerRule.H_1.Default.Description = JavaScript event handlers are commonly used to achieve a number of effects. In order to do so, \
                                       they often require access to the application data that was originally contained in the XML \
                                       input document. However, allowing for textual input data to be directly incorporated into \
                                       the handler source code is strongly discouraged since it is almost impossible to escape \
                                       the values to prevent all possible attack vectors for code injection.
AnalyzerRule.H_1.Default.Countermeasures = Try to avoid injecting any values directly into JavaScript handlers. Instead, \
                                           insert the values into separate HTML elements and read the contents of these \
                                           elements using DOM operations. This will provide you with string values without \
                                           the risk of accidentally executing foreign code.

AnalyzerRule.J_1.Default.Heading = JavaScript Block Code Injection
AnalyzerRule.J_1.Default.ShortHeading = JS Block Code Injection
AnalyzerRule.J_1.Default.PlaceholderIntroduction = No possibility was identified to inject code into JavaScript <code>script</code> blocks.
AnalyzerRule.J_1.Default.Introduction = This rule identifies potential weaknesses in the XSLT program that allow for an attacker \
                                        to introduce code into JavaScript <code>script</code> blocks.
AnalyzerRule.J_1.Default.Description = JavaScript is often embedded inside a HTML file using <code>script</code> elements. The \
                                       code contained in these scripts often require access to the application data that was \
                                       originally contained in the XML input document. However, allowing for textual input data \
                                       to be directly incorporated into the script source code is strongly discouraged since it \
                                       is almost impossible to escape the values to prevent all possible attack vectors for code \
                                       injection.
AnalyzerRule.J_1.Default.Countermeasures = Try to avoid injecting any values directly into JavaScript code. Instead, \
                                           insert the values into separate HTML elements and read the contents of these \
                                           elements using DOM operations. This will provide you with string values without \
                                           the risk of accidentally executing foreign code.

AnalyzerRule.J_2.Default.Heading = JavaScript Source Manipulation
AnalyzerRule.J_2.Default.ShortHeading = JS Source Manipulation
AnalyzerRule.J_2.Default.PlaceholderIntroduction = No possibility was identified to alter the source of JavaScript scripts.
AnalyzerRule.J_2.Default.Introduction = This rule identifies vulnerabilities that allow for an attacker to alter the source of \
                                        a JavaScript file that is referenced by the generated HTML.
AnalyzerRule.J_2.Default.Description = JavaScript code can be contained in one or multiple separate files that are referenced \
                                       from the HTML file. If the location of the referenced file is determined dynamically and \
                                       includes parts of the input data without additional checks or processing, this may allow \
                                       for an attacker to trick the browser into loading malicious code from an untrusted location.
AnalyzerRule.J_2.Default.Countermeasures = If possible, do not incorporate any dynamic elements into the source paths, but \
                                           use <code>xsl:choice</code> elements to conditionally include a list of known and \
                                           unchangeable sources. If you do need to add parts of the input data to the source path, \
                                           apply a very restrictive whitelisting filter.

AnalyzerRule.S_1.Default.Heading = Inline CSS Code Injection
AnalyzerRule.S_1.Default.ShortHeading = Inline CSS Code Injection
AnalyzerRule.S_1.Default.PlaceholderIntroduction = No possibility was identified to inject code into style attributes.
AnalyzerRule.S_1.Default.Introduction = This rule identifies potential weaknesses in the XSLT program that allow for an attacker \
                                        to introduce code into CSS style attributes.
AnalyzerRule.S_1.Default.Description = One way to achieve dynamic formatting is by applying <code>style</code> attributes to \
                                       output elements. If the contents of these attributes directly incorporate input data values, \
                                       this might allow for an attacker to introduce malicious CSS code into the resulting HTML output.
AnalyzerRule.S_1.Default.Countermeasures = Try to avoid injecting any values directly into <code>style</code> attributes. \
                                           Use <code>xsl:choice</code> elements to perform a strict whitelisting of the CSS \
                                           attributes that can occur in the HTML output.

AnalyzerRule.S_2.Default.Heading = Internal CSS Code Injection
AnalyzerRule.S_2.Default.ShortHeading = Internal CSS Code Injection
AnalyzerRule.S_2.Default.PlaceholderIntroduction = No possibility was identified to inject code into internal CSS <code>style</code> blocks.
AnalyzerRule.S_2.Default.Introduction = This rule identifies potential weaknesses in the XSLT program that allow for an attacker \
                                        to introduce code into CSS <code>style</code> blocks.
AnalyzerRule.S_2.Default.Description = CSS is often embedded inside a HTML file using <code>style</code> elements. If, in order to  \
                                       implement dynamic formatting, the contents of this code block directly incorporate input data values, \
                                       this might allow for an attacker to introduce malicious CSS code into the resulting HTML output.
AnalyzerRule.S_2.Default.Countermeasures = Try to avoid injecting any values directly into CSS code. \
                                           Use <code>xsl:choice</code> elements to perform a strict whitelisting of the CSS \
                                           attributes that can occur in the HTML output.

AnalyzerRule.S_3.Default.Heading = CSS Source Manipulation
AnalyzerRule.S_3.Default.ShortHeading = CSS Source Manipulation
AnalyzerRule.S_3.Default.PlaceholderIntroduction = No possibility was identified to alter the source of external CSS files.
AnalyzerRule.S_3.Default.Introduction = This rule identifies vulnerabilities that allow for an attacker to alter the source of \
                                        a CSS file that is referenced by the generated HTML.
AnalyzerRule.S_3.Default.Description = CSS code can be contained in one or multiple separate files that are referenced \
                                       from the HTML file. If the location of the referenced file is determined dynamically and \
                                       includes parts of the input data without additional checks or processing, this may allow \
                                       for an attacker to trick the browser into loading malicious code from an untrusted location.
AnalyzerRule.S_3.Default.Countermeasures = If possible, do not incorporate any dynamic elements into the source paths, but \
                                           use <code>xsl:choice</code> elements to conditionally include a list of known and \
                                           unchangeable sources. If you do need to add parts of the input data to the source path, \
                                           apply a very restrictive whitelisting filter.

AnalyzerRule.U_1.Default.Heading = URL Manipulation
AnalyzerRule.U_1.Default.ShortHeading = URL Manipulation
AnalyzerRule.U_1.Default.PlaceholderIntroduction = No possibility was identified to modify URLs directly.
AnalyzerRule.U_1.Default.Introduction = This rule identifies vulnerabilities that allow for an attacker to alter various URL attributes.
AnalyzerRule.U_1.Default.Description = URL attributes are used in numerous places to refer to external sources, enable navigation \
                                       or perform various other tasks. If the URL used in an attribute is determined dynamically and \
                                       includes parts of the input data without additional checks or processing, this may allow \
                                       for an attacker to trick the browser into loading malicious code from or misdirecting the \
                                       user to an untrusted location.
AnalyzerRule.U_1.Default.Countermeasures = If possible, do not incorporate any dynamic elements into the source paths, but \
                                           use <code>xsl:choice</code> elements to conditionally include a list of known and \
                                           unchangeable sources. If you do need to add parts of the input data to the source path, \
                                           only use input data elements that can not be influenced by manual intervention and/or \
                                           apply a very restrictive whitelisting filter.
